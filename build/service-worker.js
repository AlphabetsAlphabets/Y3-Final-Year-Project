const s=location.pathname.split("/").slice(0,-1).join("/"),u=[s+"/_app/immutable/entry/app.Bu7KqZKF.js",s+"/_app/immutable/nodes/0.BfOfDCst.js",s+"/_app/immutable/nodes/1.CTuyQYzr.js",s+"/_app/immutable/nodes/2.CQZxeQn0.js",s+"/_app/immutable/assets/2.Dgg2HAYR.css",s+"/_app/immutable/nodes/3.ySCAIrof.js",s+"/_app/immutable/assets/3.Cd93mKDS.css",s+"/_app/immutable/nodes/4.BZK5LMVJ.js",s+"/_app/immutable/assets/4.BQsvQHHL.css",s+"/_app/immutable/nodes/5.CRKmgHLt.js",s+"/_app/immutable/assets/5.DyvED2Y-.css",s+"/_app/immutable/chunks/B-vV4sKl.js",s+"/_app/immutable/chunks/B8fJUUNV.js",s+"/_app/immutable/chunks/BWJJ8Nft.js",s+"/_app/immutable/chunks/BcK7rX_y.js",s+"/_app/immutable/chunks/Bm68CKNN.js",s+"/_app/immutable/chunks/Bsg0kGkC.js",s+"/_app/immutable/chunks/Bv_r7GIl.js",s+"/_app/immutable/chunks/C-QMSnhD.js",s+"/_app/immutable/chunks/C9ip0I7f.js",s+"/_app/immutable/chunks/Ct-RL1iB.js",s+"/_app/immutable/assets/Todo.CaqWtxFU.css",s+"/_app/immutable/chunks/D7PZLOxe.js",s+"/_app/immutable/chunks/DM5Mwux_.js",s+"/_app/immutable/chunks/DtPNIzaT.js",s+"/_app/immutable/assets/Modal.BHfTWZaK.css",s+"/_app/immutable/chunks/ORjj_AIJ.js",s+"/_app/immutable/chunks/U4URkpAR.js",s+"/_app/immutable/chunks/en4OGELR.js",s+"/_app/immutable/chunks/nN7pxkfg.js",s+"/_app/immutable/entry/start.CGyGwfk4.js",s+"/_app/immutable/chunks/BVjkO3Q2.js"],l=[s+"/favicon.png",s+"/gear.svg",s+"/icons/icon-144.png",s+"/icons/icon.jpg",s+"/manifest.json"],o=[s+"/",s+"/calendar/",s+"/summary/",s+"/tasks/"],r="1756044739555",p=`cache-${r}`;console.log(`Current version: ${p}`);const m=[...u,...l,...o];self.addEventListener("install",a=>{a.waitUntil(async()=>{console.log("Cashing assets."),await(await caches.open(p)).addAll(m)})});self.addEventListener("activate",a=>{a.waitUntil(caches.keys().then(async n=>{for(const t of n)t!==p&&await caches.delete(t)}))});self.addEventListener("fetch",a=>{async function n(){const t=new URL(a.request.url),c=await caches.open(p);if(m.includes(t.pathname)){const e=await c.match(t.pathname);if(e)return e}try{const e=await fetch(a.request);if(!(e instanceof Response))throw new Error("invalid response from fetch");return e.status===200&&c.put(a.request,e.clone()),e}catch(e){const i=await c.match(a.request);if(i)return i;throw e}}a.respondWith(n())});
