const s=location.pathname.split("/").slice(0,-1).join("/"),u=[s+"/_app/immutable/entry/app.D3pXtmVC.js",s+"/_app/immutable/nodes/0.DbURquRA.js",s+"/_app/immutable/nodes/1.D1naDoQc.js",s+"/_app/immutable/nodes/2.CWuUzgLn.js",s+"/_app/immutable/nodes/3.BDfG1qsl.js",s+"/_app/immutable/assets/3.CVOG23gg.css",s+"/_app/immutable/nodes/4.DlnHmGZ3.js",s+"/_app/immutable/assets/4.B_Nm_UEN.css",s+"/_app/immutable/nodes/5.Bn0kMSzq.js",s+"/_app/immutable/assets/5.BZzsWO7R.css",s+"/_app/immutable/nodes/6.BpeqYIOj.js",s+"/_app/immutable/assets/6.VIPyFIDp.css",s+"/_app/immutable/chunks/B0vD_CDy.js",s+"/_app/immutable/chunks/B3QRiNGC.js",s+"/_app/immutable/chunks/B8fJUUNV.js",s+"/_app/immutable/chunks/BdBGdeW1.js",s+"/_app/immutable/chunks/BshZFSB1.js",s+"/_app/immutable/assets/Todo.CE0jTzh-.css",s+"/_app/immutable/chunks/BwlltgTs.js",s+"/_app/immutable/chunks/C-3cOWRw.js",s+"/_app/immutable/chunks/C4pyXiQM.js",s+"/_app/immutable/chunks/CYgJF_JY.js",s+"/_app/immutable/chunks/Chg3hcGr.js",s+"/_app/immutable/chunks/CovMCToo.js",s+"/_app/immutable/chunks/CxkTVC9Y.js",s+"/_app/immutable/chunks/DYAZ3xSE.js",s+"/_app/immutable/chunks/Dh1SJRbY.js",s+"/_app/immutable/chunks/GgNxBzVg.js",s+"/_app/immutable/chunks/KS9X02YG.js",s+"/_app/immutable/assets/Modal.BHfTWZaK.css",s+"/_app/immutable/chunks/Ogyqt5yR.js",s+"/_app/immutable/chunks/ozXLM6ea.js",s+"/_app/immutable/entry/start.CVxZmAcq.js",s+"/_app/immutable/chunks/BYbjoqHL.js"],o=[s+"/favicon.png",s+"/gear.svg",s+"/icons/icon-144.png",s+"/icons/icon.jpg",s+"/manifest.json"],l=[s+"/",s+"/calendar/",s+"/home/",s+"/summary/",s+"/tasks/"],h="1757145929786",p=`cache-${h}`;console.log(`Current version: ${p}`);const i=[...u,...o,...l];self.addEventListener("install",a=>{a.waitUntil(async()=>{console.log("Cashing assets."),await(await caches.open(p)).addAll(i)})});self.addEventListener("activate",a=>{a.waitUntil(caches.keys().then(async n=>{for(const t of n)t!==p&&await caches.delete(t)}))});self.addEventListener("fetch",a=>{async function n(){const t=new URL(a.request.url),c=await caches.open(p);if(i.includes(t.pathname)){const e=await c.match(t.pathname);if(e)return e}try{const e=await fetch(a.request);if(!(e instanceof Response))throw new Error("invalid response from fetch");return e.status===200&&c.put(a.request,e.clone()),e}catch(e){const m=await c.match(a.request);if(m)return m;throw e}}a.respondWith(n())});
