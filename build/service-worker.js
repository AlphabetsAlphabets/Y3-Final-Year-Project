const s=location.pathname.split("/").slice(0,-1).join("/"),u=[s+"/_app/immutable/entry/app.BFWEoe10.js",s+"/_app/immutable/nodes/0.D0L2rQOQ.js",s+"/_app/immutable/nodes/1.DXKoo5KY.js",s+"/_app/immutable/nodes/2.CWuUzgLn.js",s+"/_app/immutable/nodes/3.KbQ86ouE.js",s+"/_app/immutable/assets/3.CVOG23gg.css",s+"/_app/immutable/nodes/4.qodCX9bQ.js",s+"/_app/immutable/assets/4.C8qUtNMe.css",s+"/_app/immutable/nodes/5.GL1nymaA.js",s+"/_app/immutable/assets/5.BZzsWO7R.css",s+"/_app/immutable/nodes/6.hFjeVnOo.js",s+"/_app/immutable/assets/6.VIPyFIDp.css",s+"/_app/immutable/chunks/2clx9fPm.js",s+"/_app/immutable/chunks/3Dlza38i.js",s+"/_app/immutable/chunks/B8fJUUNV.js",s+"/_app/immutable/chunks/BTy8cjxq.js",s+"/_app/immutable/chunks/BZCZPUy_.js",s+"/_app/immutable/chunks/Bg3a6fG9.js",s+"/_app/immutable/chunks/C2cYCDAH.js",s+"/_app/immutable/chunks/CBK41Jc8.js",s+"/_app/immutable/assets/Todo.CE0jTzh-.css",s+"/_app/immutable/chunks/CC_dDezr.js",s+"/_app/immutable/chunks/CV4--SW5.js",s+"/_app/immutable/chunks/CYgJF_JY.js",s+"/_app/immutable/chunks/CcSLjgTl.js",s+"/_app/immutable/chunks/Cn_idqSd.js",s+"/_app/immutable/chunks/Cxcfmy8c.js",s+"/_app/immutable/chunks/D9K11hyb.js",s+"/_app/immutable/assets/Modal.BHfTWZaK.css",s+"/_app/immutable/chunks/DJXMaYaD.js",s+"/_app/immutable/chunks/DeFZ_gIw.js",s+"/_app/immutable/chunks/TFHsxczQ.js",s+"/_app/immutable/entry/start.CzPxfiw9.js",s+"/_app/immutable/chunks/BYbjoqHL.js"],o=[s+"/favicon.png",s+"/gear.svg",s+"/icons/icon-144.png",s+"/icons/icon.jpg",s+"/manifest.json"],l=[s+"/",s+"/calendar/",s+"/home/",s+"/summary/",s+"/tasks/"],r="1756956368983",p=`cache-${r}`;console.log(`Current version: ${p}`);const i=[...u,...o,...l];self.addEventListener("install",a=>{a.waitUntil(async()=>{console.log("Cashing assets."),await(await caches.open(p)).addAll(i)})});self.addEventListener("activate",a=>{a.waitUntil(caches.keys().then(async n=>{for(const t of n)t!==p&&await caches.delete(t)}))});self.addEventListener("fetch",a=>{async function n(){const t=new URL(a.request.url),c=await caches.open(p);if(i.includes(t.pathname)){const e=await c.match(t.pathname);if(e)return e}try{const e=await fetch(a.request);if(!(e instanceof Response))throw new Error("invalid response from fetch");return e.status===200&&c.put(a.request,e.clone()),e}catch(e){const m=await c.match(a.request);if(m)return m;throw e}}a.respondWith(n())});
