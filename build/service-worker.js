const s=location.pathname.split("/").slice(0,-1).join("/"),u=[s+"/_app/immutable/entry/app.B1dmVNwb.js",s+"/_app/immutable/nodes/0.C0GXvUZl.js",s+"/_app/immutable/nodes/1.bbpRLlYo.js",s+"/_app/immutable/nodes/2.D4yO1_Qn.js",s+"/_app/immutable/assets/2.Dgg2HAYR.css",s+"/_app/immutable/nodes/3.jepEzDgk.js",s+"/_app/immutable/assets/3.BfpYt7To.css",s+"/_app/immutable/nodes/4.C0T6h_ft.js",s+"/_app/immutable/assets/4.CQEPXU05.css",s+"/_app/immutable/nodes/5.BouajEA8.js",s+"/_app/immutable/assets/5.DyvED2Y-.css",s+"/_app/immutable/chunks/58ycRPki.js",s+"/_app/immutable/chunks/B8fJUUNV.js",s+"/_app/immutable/chunks/BCaQlCOz.js",s+"/_app/immutable/chunks/BTCSyCte.js",s+"/_app/immutable/assets/Todo.EfMxpB3F.css",s+"/_app/immutable/chunks/BdgH4GNP.js",s+"/_app/immutable/chunks/Bm68CKNN.js",s+"/_app/immutable/chunks/BoJiHln7.js",s+"/_app/immutable/chunks/Bv_r7GIl.js",s+"/_app/immutable/chunks/C09PkMul.js",s+"/_app/immutable/chunks/C1wWzSAh.js",s+"/_app/immutable/chunks/CUpc9CgM.js",s+"/_app/immutable/assets/Modal.BHfTWZaK.css",s+"/_app/immutable/chunks/CXqDgJ8w.js",s+"/_app/immutable/chunks/CsoYPtsO.js",s+"/_app/immutable/chunks/D03fl85_.js",s+"/_app/immutable/chunks/DKAeUAJ_.js",s+"/_app/immutable/chunks/DN1A8kAO.js",s+"/_app/immutable/chunks/DNnnisX2.js",s+"/_app/immutable/entry/start.CaXev7u6.js",s+"/_app/immutable/chunks/BVjkO3Q2.js"],l=[s+"/favicon.png",s+"/gear.svg",s+"/icons/icon-144.png",s+"/icons/icon.jpg",s+"/manifest.json"],o=[s+"/",s+"/calendar/",s+"/summary/",s+"/tasks/"],r="1755844066976",p=`cache-${r}`;console.log(`Current version: ${p}`);const m=[...u,...l,...o];self.addEventListener("install",a=>{a.waitUntil(async()=>{console.log("Cashing assets."),await(await caches.open(p)).addAll(m)})});self.addEventListener("activate",a=>{a.waitUntil(caches.keys().then(async n=>{for(const t of n)t!==p&&await caches.delete(t)}))});self.addEventListener("fetch",a=>{async function n(){const t=new URL(a.request.url),c=await caches.open(p);if(m.includes(t.pathname)){const e=await c.match(t.pathname);if(e)return e}try{const e=await fetch(a.request);if(!(e instanceof Response))throw new Error("invalid response from fetch");return e.status===200&&c.put(a.request,e.clone()),e}catch(e){const i=await c.match(a.request);if(i)return i;throw e}}a.respondWith(n())});
