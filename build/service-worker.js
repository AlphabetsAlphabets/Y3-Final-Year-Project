const s=location.pathname.split("/").slice(0,-1).join("/"),u=[s+"/_app/immutable/entry/app.gABdi8DH.js",s+"/_app/immutable/nodes/0.BLUJQTL5.js",s+"/_app/immutable/nodes/1.--pn7o3s.js",s+"/_app/immutable/nodes/2.Z7yfoYUW.js",s+"/_app/immutable/assets/2.Dgg2HAYR.css",s+"/_app/immutable/nodes/3.ExnzOow4.js",s+"/_app/immutable/assets/3.BfpYt7To.css",s+"/_app/immutable/nodes/4.Bevfib8o.js",s+"/_app/immutable/assets/4.DFzLthpT.css",s+"/_app/immutable/nodes/5.NOLVF0K1.js",s+"/_app/immutable/assets/5.DyvED2Y-.css",s+"/_app/immutable/chunks/4bz4uomn.js",s+"/_app/immutable/chunks/B8fJUUNV.js",s+"/_app/immutable/chunks/BdrVcQUR.js",s+"/_app/immutable/chunks/BlX3xRMM.js",s+"/_app/immutable/chunks/Bm68CKNN.js",s+"/_app/immutable/chunks/Bv_r7GIl.js",s+"/_app/immutable/chunks/CGJs_zZ1.js",s+"/_app/immutable/chunks/CLNk2ODh.js",s+"/_app/immutable/chunks/D7mLoLgg.js",s+"/_app/immutable/chunks/DDpgsnWW.js",s+"/_app/immutable/chunks/DP9sdDrD.js",s+"/_app/immutable/chunks/DUcmQWgZ.js",s+"/_app/immutable/chunks/E9bWymkK.js",s+"/_app/immutable/assets/Modal.BHfTWZaK.css",s+"/_app/immutable/chunks/Nagih0ik.js",s+"/_app/immutable/assets/Todo.EfMxpB3F.css",s+"/_app/immutable/chunks/XlJgZQad.js",s+"/_app/immutable/chunks/qkCkcpST.js",s+"/_app/immutable/chunks/xASDWjqx.js",s+"/_app/immutable/entry/start.I23P8OrT.js",s+"/_app/immutable/chunks/BVjkO3Q2.js"],o=[s+"/favicon.png",s+"/gear.svg",s+"/icons/icon-144.png",s+"/icons/icon.jpg",s+"/manifest.json"],l=[s+"/",s+"/calendar/",s+"/summary/",s+"/tasks/"],r="1755925536093",p=`cache-${r}`;console.log(`Current version: ${p}`);const m=[...u,...o,...l];self.addEventListener("install",a=>{a.waitUntil(async()=>{console.log("Cashing assets."),await(await caches.open(p)).addAll(m)})});self.addEventListener("activate",a=>{a.waitUntil(caches.keys().then(async n=>{for(const t of n)t!==p&&await caches.delete(t)}))});self.addEventListener("fetch",a=>{async function n(){const t=new URL(a.request.url),c=await caches.open(p);if(m.includes(t.pathname)){const e=await c.match(t.pathname);if(e)return e}try{const e=await fetch(a.request);if(!(e instanceof Response))throw new Error("invalid response from fetch");return e.status===200&&c.put(a.request,e.clone()),e}catch(e){const i=await c.match(a.request);if(i)return i;throw e}}a.respondWith(n())});
