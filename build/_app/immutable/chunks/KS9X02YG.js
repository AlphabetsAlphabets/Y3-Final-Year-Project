import{aj as $}from"./CovMCToo.js";const g=$(0),L={Running:"Running",Paused:"Paused",Stopped:"Stopped"};let p=-1,u=-1,l=!1;function y(){l=!1,g.set(0);const e=+setInterval(()=>{l||g.update(o=>o+1)},1e3);localStorage.setItem("timerId",`${e}`),p=Date.now()}function S(){let t=Number(localStorage.getItem("timerId"));t!==-1&&(clearInterval(t),t=-1,localStorage.removeItem("timerId"),localStorage.removeItem("currentActivity"),localStorage.removeItem("timerState")),u=Date.now();const e=u-p;return g.set(0),l=!1,[p,u,e/1e3]}function _(){l=!0}function E(){l=!1}const P=t=>{const e=Math.floor(t/3600),o=Math.floor(t%3600/60),a=t%60;return{hours:e,minutes:o,seconds:a}},j=async t=>{const e=await t.list("log");console.log("Received logs from worker",e),e&&e.result&&e.result.resultRows||console.error("Something went wrong.");const o=e.result.resultRows;return Promise.all(o.map(async s=>{const n=await t.list("project","color",`name = '${s.project_name}'`);return s.project_color=n.result.resultRows[0].color,s}))||[]},D=async(t,e,o,a,s,n)=>(await t.insert("log","activity, project_name, elapsed, start, end",`'${e}', '${o}', ${a}, ${s}, ${n}`),await j(t)),C=async(t,e,o)=>{await t.update("log",e,o)},A=async(t,e)=>{await t.remove("log",`id = ${e}`)},I=async(t,e,o)=>{const n=(await t.list("log","project_name",`id = ${e.id}`)).result.resultRows[0].name;return o!==n?`project_name = '${o}'`:""},R=async(t,e,o)=>{const a=[];if(t&&e){const s=await d(t,e);a.push(...s)}else if(t){const s=await d(t,o.end);a.push(...s)}else if(e){const s=await d(o.start,e);a.push(...s)}else console.error("Something went wrong.");return a},U=async(t,e,o,a,s,n,r,h,m)=>{const c=[],w=await v(o,s);c.push(...w);const f=await I(e,s,h);f.length!==0&&c.push(f),c.push(...await R(n,r,s));const i=await M(a,s);if(i.length!==0&&e.update("project",i[0],i[1]),c.length===0){t.closeModal(),i.length!==0&&m();return}await C(e,c.join(", "),`id = ${s.id}`),m(),t.closeModal()};function b(t){const e=t.getFullYear(),o=(t.getMonth()+1).toString().padStart(2,"0"),a=t.getDate().toString().padStart(2,"0"),s=t.getHours().toString().padStart(2,"0"),n=t.getMinutes().toString().padStart(2,"0");return`${e}-${o}-${a}T${s}:${n}`}async function v(t,e){return t.length>0&&t!==e.title?[`activity = '${t}'`]:[]}async function M(t,e){return t.length!==0&&t!==e.backgroundColor?[`color = '${t}'`,`color = '${e.backgroundColor}'`]:[]}async function d(t,e){const o=[],a=(e.getTime()-t.getTime())/1e3;return t.getTime()>=e.getTime()?(console.error("Start time must be before end time."),o):(o.push(`start = ${t.getTime()}`),o.push(`end = ${e.getTime()}`),o.push(`elapsed = ${a}`),o)}const q=async t=>{y();const[e,o,a]=S();await D(t,"NEW EVENT","No Project",a,e,o);const n=(await t.list("log","",`elapsed = ${a} AND start = ${e} AND end = ${o}`)).result.resultRows;n.length!=1&&console.error("Something went wrong.");const r=n[0];return{id:r.id,title:r.activity,start:new Date(r.start),end:new Date(r.end),backgroundColor:"#000000"}};export{L as T,S as a,D as b,P as c,g as d,A as e,b as f,q as g,U as h,C as i,j as l,_ as p,E as r,y as s,d as u};
