import{ah as m}from"./BZCZPUy_.js";const g=m(0),E={Running:"Running",Paused:"Paused",Stopped:"Stopped"};let f=-1,d=-1,i=null,u=!1;function S(){u=!1,g.set(0),i=setInterval(()=>{u||g.update(t=>t+1)},1e3),f=Date.now()}function j(){i!==null&&(clearInterval(i),i=null),d=Date.now();const t=d-f;return g.set(0),u=!1,[f,d,t/1e3]}function P(){u=!0}function U(){u=!1}const q=t=>{const e=Math.floor(t/3600),s=Math.floor(t%3600/60),n=t%60;return{hours:e,minutes:s,seconds:n}},D=async t=>{const e=await t.list("log");console.log("Received logs from worker",e),e&&e.result&&e.result.resultRows||console.error("Something went wrong.");const s=e.result.resultRows;return Promise.all(s.map(async o=>{const a=await t.list("project","color",`name = '${o.project_name}'`);return o.project_color=a.result.resultRows[0].color,o}))||[]},C=async(t,e,s,n,o,a)=>(await t.insert("log","activity, project_name, elapsed, start, end",`'${e}', '${s}', ${n}, ${o}, ${a}`),await D(t)),R=async(t,e,s)=>{await t.update("log",e,s)},A=async(t,e)=>{await t.remove("log",`id = ${e}`)},M=async(t,e,s)=>{const a=(await t.list("log","project_name",`id = ${e.id}`)).result.resultRows[0].name;return s!==a?`project_name = '${s}'`:""},v=async(t,e,s)=>{const n=[];if(t&&e){const o=await p(t,e);n.push(...o)}else if(t){const o=await p(t,s.end);n.push(...o)}else if(e){const o=await p(s.start,e);n.push(...o)}else console.error("Something went wrong.");return n},I=async(t,e,s,n,o,a,r,$,h)=>{const c=[],y=await L(s,o);c.push(...y);const w=await M(e,o,$);w.length!==0&&c.push(w),c.push(...await v(a,r,o));const l=await N(n,o);if(l.length!==0&&e.update("project",l[0],l[1]),c.length===0){t.closeModal(),l.length!==0&&h();return}await R(e,c.join(", "),`id = ${o.id}`),h(),t.closeModal()};function T(t){const e=t.getFullYear(),s=(t.getMonth()+1).toString().padStart(2,"0"),n=t.getDate().toString().padStart(2,"0"),o=t.getHours().toString().padStart(2,"0"),a=t.getMinutes().toString().padStart(2,"0");return`${e}-${s}-${n}T${o}:${a}`}async function L(t,e){return t.length>0&&t!==e.title?[`activity = '${t}'`]:[]}async function N(t,e){return t.length!==0&&t!==e.backgroundColor?[`color = '${t}'`,`color = '${e.backgroundColor}'`]:[]}async function p(t,e){const s=[],n=(e.getTime()-t.getTime())/1e3;return t.getTime()>=e.getTime()?(console.error("Start time must be before end time."),s):(s.push(`start = ${t.getTime()}`),s.push(`end = ${e.getTime()}`),s.push(`elapsed = ${n}`),s)}const b=async t=>{S();const[e,s,n]=j();await C(t,"NEW EVENT","No Project",n,e,s);const a=(await t.list("log","",`elapsed = ${n} AND start = ${e} AND end = ${s}`)).result.resultRows;a.length!=1&&console.error("Something went wrong.");const r=a[0];return{id:r.id,title:r.activity,start:new Date(r.start),end:new Date(r.end),backgroundColor:"#000000"}};export{E as T,j as a,C as b,q as c,g as d,A as e,T as f,b as g,I as h,R as i,D as l,P as p,U as r,S as s,p as u};
