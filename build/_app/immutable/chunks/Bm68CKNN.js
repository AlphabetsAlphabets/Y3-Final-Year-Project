function y(t){const o=t.getFullYear(),s=(t.getMonth()+1).toString().padStart(2,"0"),r=t.getDate().toString().padStart(2,"0"),e=t.getHours().toString().padStart(2,"0"),a=t.getMinutes().toString().padStart(2,"0");return`${o}-${s}-${r}T${e}:${a}`}async function d(t,o){return t.length>0&&t!==o.title?[`activity = '${t}'`]:[]}async function h(t,o){return t.length!==0&&t!==o.backgroundColor?[`color = '${t}'`,`color = '${o.backgroundColor}'`]:[]}async function u(t,o){const s=[],r=t.getTime()-o.getTime();return t.getTime()>=o.getTime()?(console.error("Start time must be before end time."),s):(s.push(`start = ${t.getTime()}`),s.push(`end = ${o.getTime()}`),s.push(`elapsed = ${r}`),s)}const f=async t=>{const o=await t.list("log");console.log("Received logs from worker",o),o&&o.result&&o.result.resultRows||console.error("Something went wrong.");const s=o.result.resultRows;return Promise.all(s.map(async e=>{const a=await t.list("project","color",`name = '${e.project_name}'`);return e.project_color=a.result.resultRows[0].color,e}))||[]},m=async(t,o,s,r,e,a)=>(await t.insert("log","activity, project_name, elapsed, start, end",`'${o}', '${s}', ${r}, ${e}, ${a}`),await f(t)),$=async(t,o,s)=>{await t.update("log",o,s)},S=async(t,o,s,r,e,a,l,g)=>{const n=[],p=await d(s,e);if(n.push(...p),a&&l){const c=await u(a,l);n.push(...c)}else if(a){const c=await u(a,e.end);n.push(...c)}else if(l){const c=await u(e.start,l);n.push(...c)}else console.error("Something went wrong.");const i=await h(r,e);if(i.length!==0&&o.update("project",i[0],i[1]),n.length===0){t.closeModal(),i.length!==0&&g();return}await $(o,n.join(", "),`id = ${e.id}`),g(),t.closeModal()};export{m as a,$ as b,y as f,S as h,f as l,u};
